================================================================
Day1 -
Task1- open Github repository link
https://github.com/YogeshRaje/INTEL_FICE_KPR

===========================================================

Task2- Register and LogIn on Intel Devlcloud oneAPI

step1)- open url  https://devcloud.intel.com/oneapi/ 
and create account on Intel Devlcoud oneAPI by clicking link  Register now for Intel Devcloud 

step3) Sign In with your credentials and Click on Get started tab  
Step4) Under  Intel® oneAPI Base Toolkit , click on View Training Modules Button
step5) Under Module 0 ,Introduction to JupyterLab* and Notebooks ; click on link  TryIn JupyterLab ; It will open Intel's Jupyter lab 
step6) It will open under folder file Introduction_to_Jupyter.ipynb under with oneAPI_Essentials/00_Introduction_to_Jupyter/Introduction_to_Jupyter.ipynb 
step7) To get updated files from Intel ; Run the last code cell of jupyter notebook Introduction_to_Jupyter.ipynb
!/data/oneapi_workshop/get_jupyter_notebooks.sh

step7)Invoke Intel compiler on Devcloud 
While running On Devcloud change command in file 
oneAPI_Essentials/01_oneAPI_Intro/run_simple.sh
from 
dpcpp lab/simple.cpp
to
dpcpp lab/helloworld.c

and in lab folder add file helloworld.c 
oneAPI_Essentials/01_oneAPI_Intro/lab/helloworld.c

================
++++++++++++++++++++++++++++++
Task - execute c program on IntelDevcloud's Terminal 
step1) LogiIn and Click on + symbol and Terminal 
step2) Intinitalize and Invoke Intel optimized complier using follwoing command 
>source /opt/intel/inteloneapi/setvars.sh

step3) create helloworld.c program using nano editor
>nano helloworld.c

step4)compile and execute program 
>dpcpp welcome.c -o intelwelcomedemo.out
>./intelwelcomedemo.out


step5) diaplay how much time is taken by above program 
add time code into the helloword.c and run the code with above steps 

code for hellowordwithtme.c

#include <stdio.h>
#include <time.h>

int main() {
// printf() displays the string inside quotation
	double time_spent = 0.0;
 
	clock_t begin = clock();
 	printf("Hello, World!");
 	clock_t end = clock();
	time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
 
   	printf("The elapsed time is %f seconds", time_spent);
   	return 0;
}





++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Day2
Task1 - Install and Invoke Intel optimzed complier on windows O.S.

Prerequisite-
-On Windoows OS ,  Microsoft Visual Studio 2022 community Edition is to be installed (For Linux OS this prequisite is not appilcable)

A)Download link for Intel c c++ compiler 
https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp


B)To run file using intel optimized complier 
Step1 ) Intilaize the Intel Complier 
a)Open command prompt 
>cmd 
>Cd C:\Program Files (x86)\Intel\oneAPI
> setvars.bat

b) To run c or cpp code on intel optimized complier 
>cd C:\Users\user\Desktop\kpriet
>dpcpp helloworld.c
>icx helloworld.c
>helloworld

======================================================================================
Task2- Run c program on Ubuntu Linux O.S.
-Run program On Ubuntu Linux 
step1- open newterminal and write program using nano editor 
>nano welcome.c
write code 

Step2 - Save program and retrun back to terminal
-save ctrl+X 
-Press Y and Enter Key

Step3-complie and execute program uisng gcc compiler 
>gcc welcome.c

-If gcc is not installed then Install gcc 
>sudo get install gcc 

-compile c program using gcc compiler 
>gcc welcome.c   # It will create a.out file 
check file a.out 
>dir 

-run the program 
>./a.out # It shows output 

****Another way to run c proram using gcc******
To run file with our own outpout file
>gcc filename.c -o filename.out 
>gcc welcome.c -o wel.out
>dir 
>./wel.out

=========================================================================================
Task3 - Install Intel's Compiler on Ubuntu Linux O.S.

step1)- download comlpiler .sh file
https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp
step2)change mode of file 
-open new terminal in Downloads
>chmod +777 l_dpcpp-cpp-compiler_p_2022.2.1.16991_offline.sh
Run .sh file 
>sh l_dpcpp-cpp-compiler_p_2022.2.1.16991_offline.sh

-Intsaller will open and install intel complier 

-After installation it is saved at location 
/home/yogesh/intel/oneapi
https://www.intel.com/content/www/us/en/develop/documentation/get-started-with-dpcpp-compiler/top/get-started-on-linux.html

-open terminal in home
>cd intel/oneapi
-initialize Intel complier 
>source setvars.sh intel64 

-after initializing Intel compiler go to directory where c or c++ program (welcome.c) is saved
>cd /home/yogesh

-run program with intel complier 
>icx welcome.c -o intelwelcomedemo.out
>./intelwelcomedemo.out

==============================================================================================================
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Day3

Task 1- Download and install Dev-C++ Software for excuting programs of c and c++ on Windows O.S 
https://sourceforge.net/projects/orwelldevcpp/

Open Terminal 

>clinfo –l 
To get access of GPU
>qsub -I -l nodes=1:gpu:ppn=2 
>clinfo –l 
>exit
>qstat


+++++++++++++++++++++++++++++++
Day5 -
Task1-Run the program on Intel Devcloud 
1)Open Intel Devcloud OneAPI with your LogIn Credentials
2)Open Terminal on Intel Devcloud
3)Create new Folder named cprograms under oneAPI_Essentials folder
3a)Invoke dpcpp compiler 
> source /opt/intel/inteloneapi/setvars.sh
4)Upload your program into the folder named cprograms
5)Run your program eg helloworldwithtime.c using command
 >dpcpp helloworldwithtime.c -o helloworld.out
 >./helloworld.out 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
https://devcloud.intel.com/oneapi/documentation/base-toolkit/


6) Request an interactive session on a DevCloud GPU node using qsub  
qsub -I -l nodes=1:gpu:ppn=2 -d .


7)create build.sh
>nano build.sh

8)save following code into build.sh and return to terminal 
#!/bin/bash
source /opt/intel/inteloneapi/setvars.sh
make clean
make all

9)create run.sh
>nano run.sh 
 
10) Save  following code into run.sh and return to terminal 
#!/bin/bash
source /opt/intel/inteloneapi/setvars.sh
dpcpp helloworldwithtime.c -o hello.out
./hello.out
make run


11)run follwoing command on terminal 
>qsub -l nodes=1:gpu:ppn=2 -d . build.sh
qsub -l nodes=1:fpga:ppn=2 -d . build.sh

12)run follwoing command on terminal 
>qsub -l nodes=1:gpu:ppn=2 -d . run.sh
qsub -l nodes=1:fpga:ppn=2 -d . run.sh

13)To check output run command on terminal 
>cat run.sh.oXXXX

Task3 -
Excersice Day5
https://devcloud.intel.com/oneapi/documentation/base-toolkit/
+++++++++++++++++++++++++++++++++++++++++++++=

Task2  -Intel Advisor -offload advisor
open terminal on Intel Devcloud  and execute follwoing commands
1)$ mkdir day5
2)$ cd day5
3)$ git clone https://github.com/oneapi-src/oneAPI-samples.git
4)$ cd oneAPI-samples/Tools/Advisor/matrix_multiply_advisor/

5)$ cmake .
6)$ make
7)$ advixe-python $APM/collect.py advisor_project --config gen9 -- ./matrix.dpcpp
8)$ advixe-python $APM/analyze.py advisor_project --config gen9 --out-dir ./analyze

day5/oneAPI-samples/Tools/Advisor/matrix_multiply_advisor/analyze/report.html





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
